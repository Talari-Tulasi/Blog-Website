// Import required modules
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
require('dotenv').config();

// Initialize express app
const app = express();
const PORT = process.env.PORT || 3000;

// Set view engine to EJS
app.set('view engine', 'ejs');

// Middleware
app.use(express.static('public'));
app.use(bodyParser.urlencoded({ extended: true }));

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

// Define Mongoose Schema and Model
const postSchema = new mongoose.Schema({
    title: String,
    body: String
});
const Post = mongoose.model('Post', postSchema);

// Routes

// Home route to display all posts
app.get('/', async (req, res) => {
    const posts = await Post.find();
    res.render('index', { posts: posts });
});

// Route to display the form for creating a new post
app.get('/new-post', (req, res) => {
    res.render('new-post');
});

// Route to handle new post submission
app.post('/new-post', async (req, res) => {
    const newPost = new Post({
        title: req.body.title,
        body: req.body.body
    });
    await newPost.save();
    res.redirect('/');
});

// Route to display a single post
app.get('/post/:id', async (req, res) => {
    const post = await Post.findById(req.params.id);
    res.render('post', { post: post });
});

// Start the server
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});

// HTML Templates as inline strings

app.locals.templates = {
    index: `
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <link rel="stylesheet" href="/css/styles.css">
            <title>Blog</title>
        </head>
        <body>
            <header>
                <h1>My Blog</h1>
                <nav>
                    <a href="/">Home</a>
                    <a href="/new-post">New Post</a>
                </nav>
            </header>
            <main>
                <% posts.forEach(function(post) { %>
                    <article>
                        <h2><%= post.title %></h2>
                        <p><%= post.body.substring(0, 100) %>...</p>
                        <a href="/post/<%= post._id %>">Read More</a>
                    </article>
                <% }); %>
            </main>
        </body>
        </html>
    `,
    newPost: `
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <link rel="stylesheet" href="/css/styles.css">
            <title>New Post</title>
        </head>
        <body>
            <header>
                <h1>Create a New Post</h1>
            </header>
            <main>
                <form action="/new-post" method="POST">
                    <label for="title">Title:</label>
                    <input type="text" id="title" name="title" required>
                    <label for="body">Content:</label>
                    <textarea id="body" name="body" required></textarea>
                    <button type="submit">Submit</button>
                </form>
            </main>
        </body>
        </html>
    `,
    post: `
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <link rel="stylesheet" href="/css/styles.css">
            <title><%= post.title %></title>
        </head>
        <body>
            <header>
                <h1><%= post.title %></h1>
            </header>
            <main>
                <article>
                    <p><%= post.body %></p>
                </article>
            </main>
        </body>
        </html>
    `
};

// Serve CSS directly from within app.js
app.get('/css/styles.css', (req, res) => {
    res.send(`
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }
        
        header {
            background-color: #333;
            color: white;
            padding: 1em;
            text-align: center;
        }
        
        nav a {
            color: white;
            margin: 0 15px;
            text-decoration: none;
        }
        
        main {
            padding: 2em;
        }
        
        article {
            margin-bottom: 2em;
        }
        
        form {
            display: flex;
            flex-direction: column;
        }
        
        label {
            margin-bottom: 0.5em;
        }
        
        input, textarea, button {
            margin-bottom: 1em;
            padding: 0.5em;
        }
    `);
});
